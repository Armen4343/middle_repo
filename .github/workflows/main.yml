name: Trigger and Monitor Workflow

on:
  workflow_call:
    inputs:
      owner:
        description: 'GitHub Owner'
        required: true
        type: string
      repo:
        description: 'Repository Name'
        required: true
        type: string
      event_type:
        description: 'Event Type to trigger'
        required: true
        type: string
      client_payload:
        description: 'Client Payload'
        required: false
        default: '{}'
        type: string
      token:
        description: 'GitHub Personal Access Token (for authorization)'
        required: true
        type: string

jobs:
  trigger:
    runs-on: ubuntu-latest
    env:
      INPUT_OWNER: ${{ inputs.owner }}
      INPUT_REPO: ${{ inputs.repo }}
      INPUT_EVENT_TYPE: ${{ inputs.event_type }}
      INPUT_CLIENT_PAYLOAD: ${{ inputs.client_payload }}
      INPUT_TOKEN: ${{ inputs.token }}
    outputs:
      workflow_conclusion: ${{ steps.trigger.outputs.workflow_conclusion }}
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install jq

      - name: Trigger another workflow and wait
        id: trigger
        run: |
          echo "Triggering workflow in repository ${INPUT_OWNER}/${INPUT_REPO}..."

          export INPUT_MAX_TIME=1200
          export INPUT_WAIT_TIME=3

          # Trigger the repository_dispatch event
          resp=$(curl -X POST -s "https://api.github.com/repos/${INPUT_OWNER}/${INPUT_REPO}/dispatches" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${INPUT_TOKEN}" \
            -d "{\"event_type\": \"${INPUT_EVENT_TYPE}\", \"client_payload\": ${INPUT_CLIENT_PAYLOAD} }")
          
          echo "$resp"
          echo "Triggered"
          
          if echo "$resp" | grep -q "message"; then
            echo "Error: ${resp}"
            exit 1
          else
            echo "Workflow triggered successfully"
          fi
          
          # Find the triggered workflow run
          counter=0
          while true; do
            counter=$((counter + 1))
            workflow=$(curl -s "https://api.github.com/repos/${INPUT_OWNER}/${INPUT_REPO}/actions/runs?event=repository_dispatch" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${INPUT_TOKEN}" | jq '.workflow_runs[0]')
          
            if [ -z "$workflow" ]; then
              echo "No workflow runs found. Retrying..."
              sleep 2
              continue
            fi
          
            wtime=$(echo "$workflow" | jq -r '.created_at')
            atime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            tdif=$(( $(date -d "$atime" +"%s") - $(date -d "$wtime" +"%s") ))
          
            if [ "$tdif" -gt 10 ]; then
              if [ "$counter" -gt 3 ]; then
                echo "Workflow not found after multiple attempts"
                exit 1
              else
                echo "Waiting for workflow to start..."
                sleep 2
              fi
            else
              break
            fi
          done
          
          wfid=$(echo "$workflow" | jq -r '.id')
          conclusion=$(echo "$workflow" | jq -r '.conclusion')
          
          echo "Workflow id is ${wfid}"
          
          # Wait for the workflow to complete
          counter=0
          while [ "$conclusion" = "null" ]; do
            if [ "$counter" -ge "$INPUT_MAX_TIME" ]; then
              echo "Time limit exceeded"
              exit 1
            fi
            
            echo "Check run on https://github.com/${INPUT_OWNER}/${INPUT_REPO}/actions/runs/${wfid}"
            sleep "$INPUT_WAIT_TIME"
            
            conclusion=$(curl -s "https://api.github.com/repos/${INPUT_OWNER}/${INPUT_REPO}/actions/runs/${wfid}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${INPUT_TOKEN}" | jq -r '.conclusion')
            counter=$(( counter + "$INPUT_WAIT_TIME" ))
          done
          
          if [ "$conclusion" = "success" ]; then
            echo "Workflow run successful"
            echo "workflow_conclusion=success" >> $GITHUB_ENV
          else
            echo "Workflow run failed"
            echo "workflow_conclusion=fail" >> $GITHUB_ENV
          fi
